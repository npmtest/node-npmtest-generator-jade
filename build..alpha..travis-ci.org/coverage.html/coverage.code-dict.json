{"/home/travis/build/npmtest/node-npmtest-generator-jade/test.js":"/* istanbul instrument in package npmtest_generator_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-jade/lib.npmtest_generator_jade.js":"/* istanbul instrument in package npmtest_generator_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_jade = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_jade = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-jade/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-jade && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_jade\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_jade.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_jade.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_jade.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_jade.__dirname + '/lib.npmtest_generator_jade.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/index.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\n\nvar JadeGenerator = module.exports = function JadeGenerator(args, options) {\n  yeoman.generators.Base.apply(this, arguments);\n\n  // setup the test-framework property, Gruntfile template will need this\n  this.testFramework = options['test-framework'] || 'mocha';\n\n  // for hooks to resolve on mocha by default\n  options['test-framework'] = this.testFramework;\n\n  // resolved to mocha by default (could be switched to jasmine for instance)\n  this.hookFor('test-framework', {\n    as: 'app',\n    options: {\n      options: {\n        'skip-message': options['skip-install-message'],\n        'skip-install': options['skip-install']\n      }\n    }\n  });\n\n  this.pkg = JSON.parse(\n    this.readFileAsString(path.join(__dirname, '../package.json'))\n  );\n\n};\n\nutil.inherits(JadeGenerator, yeoman.generators.Base);\n\nJadeGenerator.prototype.askFor = function askFor() {\n  var cb = this.async(),\n    welcomeMsg = 'You are running generator-jade version: ' + this.pkg.version,\n    prompts;\n\n  console.log(welcomeMsg);\n\n  prompts = [\n    {\n      name: 'projectName',\n      message: 'Name your project'\n    }, {\n      type: 'list',\n      name: 'cssProcessor',\n      message: 'Do you like sass/compass, stylus or just css',\n      choices: ['stylus', 'sass', 'css']\n    },\n    {\n      type: 'confirm',\n      name: 'autoprefixer',\n      message: 'Do you want to use the autoprefixer?',\n      default: false\n    },\n    {\n      type: 'confirm',\n      name: 'isPrivate',\n      message: 'Is this a private project?',\n      default: true\n    }, {\n      type: 'confirm',\n      name: 'jquery',\n      message: 'Do you like to use jQuery',\n      default: true\n    }\n  ];\n\n  this.prompt(prompts, function(props) {\n    this.projectName = props.projectName || this.appname;\n    this.cssProcessor = props.cssProcessor;\n    this.autoprefixer = props.autoprefixer;\n    this.isPrivate = props.isPrivate;\n    this.jquery = props.jquery;\n\n    cb();\n  }.bind(this));\n};\n\nJadeGenerator.prototype.gruntfile = function gruntfile() {\n  this.template('_Gruntfile.js', 'Gruntfile.js');\n\n  this.copy('tasks/aliases.yaml', 'tasks/aliases.yaml');\n  this.copy('tasks/bump.js', 'tasks/bump.js');\n  this.copy('tasks/changelog.js', 'tasks/changelog.js');\n  this.copy('tasks/clean.js', 'tasks/clean.js');\n  this.copy('tasks/connect.js', 'tasks/connect.js');\n  this.copy('tasks/copy.js', 'tasks/copy.js');\n  this.copy('tasks/jade.js', 'tasks/jade.js');\n  this.copy('tasks/stylus.js', 'tasks/stylus.js');\n  this.copy('tasks/watch.js', 'tasks/watch.js');\n  this.copy('tasks/htmlmin.js', 'tasks/htmlmin.js');\n  this.copy('tasks/imagemin.js', 'tasks/imagemin.js');\n  this.copy('tasks/rev.js', 'tasks/rev.js');\n  this.copy('tasks/svgmin.js', 'tasks/svgmin.js');\n  this.copy('tasks/usemin.js', 'tasks/usemin.js');\n  this.copy('tasks/useminPrepare.js', 'tasks/useminPrepare.js');\n\n  if (this.autoprefixer) {\n    this.copy('tasks/autoprefixer.js', 'tasks/autoprefixer.js');\n  }\n\n};\n\nJadeGenerator.prototype.tools = function tools() {\n  this.copy('bowerrc', '.bowerrc');\n  this.template('_bower.json', 'bower.json');\n  this.template('_package.json', 'package.json');\n};\n\nJadeGenerator.prototype.editor = function editor() {\n  this.copy('editorconfig', '.editorconfig');\n  this.copy('jshintrc', '.jshintrc');\n};\n\nJadeGenerator.prototype.git = function git() {\n  this.template('_gitignore', '.gitignore');\n};\n\nJadeGenerator.prototype.jade = function jade() {\n  this.directory('jade', 'app/jade');\n};\n\nJadeGenerator.prototype.projectFiles = function projectFiles() {\n  if (this.cssProcessor === 'sass') {\n    this.copy('_main.sass', 'app/styles/main.sass');\n  } else if (this.cssProcessor === 'stylus') {\n    this.copy('_main.styl', 'app/styles/main.styl');\n  } else if (this.cssProcessor === 'css') {\n    this.copy('_main.css', 'app/styles/main.css');\n  }\n\n  this.copy('_main.js', 'app/scripts/main.js');\n  this.copy('CONVENTIONS.md', 'CONVENTIONS.md');\n};\n\nJadeGenerator.prototype.install = function() {\n  if (this.options['skip-install']) {\n    return;\n  }\n\n  var done = this.async();\n  this.installDependencies({\n    skipMessage: this.options['skip-install-message'],\n    skipInstall: this.options['skip-install'],\n    callback: done\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/index.js":"var generator = require('yeoman-generator');\nvar util      = require('util');\n\n// Documentation: https://github.com/yeoman/generator/wiki/base\n\nvar Generator = module.exports = function Generator() {\n  generator.Base.apply(this, arguments);\n  // this.option('flag', { desc: 'Desc for flag', ...})\n  // this.argument('filename', { desc: 'Desc for filename argument', ...})\n};\n\nutil.inherits(Generator, generator.Base);\n\n// Copies the entire template directory (with `.`, meaning the\n// templates/ root) to the specified location\nGenerator.prototype.scaffold = function scaffold() {\n  this.directory('.', 'place/to/generate');\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/_Gruntfile.js":"/*jshint strict:false */\n/* global require, module */\n\n(function() {\n  var path = require('path'),\n    folders = {\n      app: 'app',\n      dist: 'dist',\n      tmp: '.tmp'\n    };\n\n  module.exports = function(grunt) {\n    require('time-grunt')(grunt);\n\n    require('load-grunt-config')(grunt, {\n      configPath: path.join(process.cwd(), 'tasks'),\n      data: {\n        folders: folders,\n        packageJson: require('./package.json')\n      },\n      init: true\n    });\n  };\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/_main.js":"","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/autoprefixer.js":"/**\n * grunt-autoprefixer options\n * @type {Object}\n */\n\nmodule.exports = {\n  options: {\n    browsers: ['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1']\n  },\n  dist: {\n    files: [{\n      expand: true,\n      cwd: '<%= folders.tmp %>/styles',\n      dest: '<%= folders.tmp %>/styles',\n      src: '{,*/}*.css'\n    }]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/bump.js":"/**\n * grunt-bump options\n * @type {Object}\n */\n\nmodule.exports = {\n  options: {\n    files: ['package.json'],\n    commitFiles: ['CHANGELOG.md', 'package.json'],\n    pushTo: 'origin'\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/changelog.js":"/**\n * grunt-conventional-changelog options\n * @type {Object}\n */\n\nmodule.exports = {\n  options: {\n    // Uncomment for sublime on the fly changelog editing\n    // editor: 'subl -w'\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/clean.js":"/**\n * grunt-contrib-clean options\n * @type {Object}\n */\n\nmodule.exports = {\n  build: {\n    files: [{\n      dot: true,\n      src: [\n        '<%= folders.tmp %>',\n        '<%= folders.dist %>/*',\n        '!<%= folders.dist %>/.git*'\n      ]\n    }]\n  },\n  server: '<%= folders.tmp %>'\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/connect.js":"/**\n * grunt-contrib-connect options\n * @type {Object}\n */\n\nmodule.exports = {\n  options: {\n    port: 9000,\n    // change this to '0.0.0.0' to access the server from outside\n    hostname: '0.0.0.0',\n    livereload: true\n  },\n  server: {\n    options: {\n      open: true,\n      base: [\n        '<%= folders.tmp %>',\n        '<%= folders.app %>'\n      ]\n    }\n  },\n  test: {\n    options: {\n      base: [\n        '<%= folders.tmp %>',\n        'test',\n        '<%= folders.app %>'\n      ]\n    }\n  },\n  dist: {\n    options: {\n      open: true,\n      base: [\n        '<%= folders.dist %>'\n      ],\n      livereload: false\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/copy.js":"/**\n * grunt-contrib-copy options\n * @type {Object}\n */\n\nmodule.exports = {\n  dist: {\n    files: [{\n      expand: true,\n      dot: true,\n      cwd: '<%= folders.app %>',\n      dest: '<%= folders.dist %>',\n      src: [\n        '*.{ico,txt}',\n        '.htaccess',\n        'images/{,*/}*.{jpg,jpeg,png,webp,gif,svg}',\n        'styles/fonts/*'\n      ]\n    }, {\n      expand: true,\n      cwd: '<%= folders.app %>',\n      dest: '<%= folders.tmp %>',\n      src: [\n        'scripts/{,*/}*js', 'bower_components/**/*js'\n      ]\n    }]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/htmlmin.js":"/**\n * grunt-contrib-htmlmin options\n * @type {Object}\n */\n\nmodule.exports = {\n  dist: {\n    files: [{\n      expand: true,\n      cwd: '<%= folders.tmp %>',\n      src: '{,*/}*.html',\n      dest: '<%= folders.dist %>'\n    }]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/imagemin.js":"/**\n * grunt-contrib-imagemin options\n * @type {Object}\n */\n\nmodule.exports = {\n  dist: {\n    files: [{\n      expand: true,\n      cwd: '<%= folders.app %>/images',\n      src: '{,*/}*.{png,jpg,jpeg}',\n      dest: '<%= folders.dist %>/images'\n    }]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/jade.js":"/**\n * grunt-contirb-jade options\n * @type {Object}\n */\n\nmodule.exports = {\n  html: {\n    files: [{\n      expand: true,\n      cwd: '<%= folders.app %>/jade',\n      src: ['index.jade'],\n      dest: '.tmp/',\n      ext: '.html'\n    }],\n    options: {\n      client: false,\n      pretty: true,\n      basedir: '<%= folders.app %>/jade'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/rev.js":"/**\n * grunt-rev options\n * @type {Object}\n */\n\nmodule.exports = {\n  dist: {\n    files: {\n      src: [\n        '<%= folders.dist %>/scripts/{,*/}*.js',\n        '<%= folders.dist %>/styles/{,*/}*.css',\n        '<%= folders.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp}',\n        '<%= folders.dist %>/styles/fonts/*'\n      ]\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/stylus.js":"/**\n * grunt-contrib-stylus options\n * @type {Object}\n */\n\nmodule.exports = {\n  compile: {\n    files: [{\n      expand: true,\n      cwd: '<%= folders.app %>/styles',\n      src: ['{,*/}*.styl', '!**/_*'],\n      dest: '<%= folders.tmp %>/styles',\n      ext: '.css'\n    }],\n    options: {\n      compress: false,\n      // convert the css url() declaration into nib inline imaging function\n      // this converts images smaller than 30kb to data url\n      urlfunc: 'url'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/svgmin.js":"/**\n * grunt-svgmin options\n * @type {Object}\n */\n\nmodule.exports = {\n  dist: {\n    files: [{\n      expand: true,\n      cwd: '<%= folders.app %>/images',\n      src: '{,*/}*.svg',\n      dest: '<%= folders.dist %>/images'\n    }]\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/usemin.js":"/**\n * grunt-usemin options\n * @type {Object}\n */\n\nmodule.exports = {\n  html: ['<%= folders.dist %>/{,*/}*.html'],\n  css: ['<%= folders.dist %>/styles/{,*/}*.css'],\n  options: {\n    dirs: ['<%= folders.dist %>']\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/useminPrepare.js":"/**\n * grunt-useminPrepare options\n * @type {Object}\n */\n\nmodule.exports = {\n  html: '<%= folders.tmp %>/index.html',\n  options: {\n    dest: '<%= folders.dist %>'\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-jade/node_modules/generator-jade/app/templates/tasks/watch.js":"/**\n * grunt-contrib-watch options\n * @type {Object}\n */\n\nmodule.exports = {\n  server: {\n    options: {\n      livereload: true\n    },\n    files: [\n      '<%= folders.tmp %>/*.html',\n      '<%= folders.tmp %>/styles/{,*/}*.css',\n      '{.tmp,<%= folders.app %>}/scripts/{,*/}*.js',\n      '<%= folders.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n    ]\n  },\n  jade: {\n    files: '<%= folders.app %>/jade/**/*.jade',\n    tasks: ['jade']\n  },\n  stylus: {\n    files: '<%= folders.app %>/styles/**/*.styl',\n    tasks: ['stylus', 'autoprefixer']\n  }\n};\n"}